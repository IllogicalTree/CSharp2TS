<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CSharp2TS.CLI.Generators.Entities" #>
<#@ import namespace="CSharp2TS.Core.Enums" #>
// Auto-generated from <#= TypeName #>.cs

import { apiClient } from '<#= ApiClientImportPath #>apiClient';
<# foreach (var item in Imports) { #>
import <#= item.Name #> from '<#= item.Path #>';
<# } #>

export default {
<# foreach (var item in Items) { #>
  async <#= item.MethodName #>(<#= string.Join(", ", item.AllParams.Select(i => $"{i.Name}: {i.Property}")) #>): Promise<<#= item.ReturnType #>> {
<# if (item.IsBodyRawFile) {#>
    const formData = new FormData();
<# if (!item.BodyParam.Property.IsCollection) {#>
    formData.append('<#= item.BodyParam.Name #>', <#= item.BodyParam.Name #>);

<#} else {#>
    for (let i = 0; i < <#= item.BodyParam.Name #>.length; i++) {
        const f = <#= item.BodyParam.Name #>[i];
        formData.append('<#= item.BodyParam.Name #>[' + i + ']', f);
    }

<#}#>
<#}#>
    <# if (item.ReturnType.TSType != TSType.Void) { #>const response = <# } #>await apiClient.instance.<#= item.HttpMethod #><# if (item.ReturnType.TSType != TSType.Void) { #><<#= item.ReturnType #>><# } #>(`<#= item.Route #><#= item.QueryString #>`<#
    if (item.IsBodyRawFile) { #>, formData<# } #><#
    else if (item.BodyParam != null) { #>, <#= item.BodyParam.Name #><# } #><#
    if (item.ReturnType.TSType == TSType.File) { #>,
      { responseType: 'blob' }<# } #><# if (item.BodyParam?.Property.TSType == TSType.File) { #>,
      { headers: { 'Content-Type': 'multipart/form-data' } }<# } #>);
<# if (item.ReturnType.TSType != TSType.Void) { #>
    return response.data; 
<# } #>
  },

<# } #>
};
<#+
public string TypeName { get; set; }
public string ApiClientImportPath { get; set; }
public IList<TSImport> Imports { get; set; }
public IList<TSServiceMethod> Items { get; set; }
#>