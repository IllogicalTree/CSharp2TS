<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CSharp2TS.CLI.Generators.Entities" #>
// Auto-generated from <#= TypeName #>.cs

import { apiClient } from '<#= ApiClientImportPath #>apiClient';
<# foreach (var item in Imports) { #>
import <#= item.Name #> from '<#= item.Path #>';
<# } #>

export default {
<# foreach (var item in Items) { #>
  async <#= item.MethodName #>(<#= string.Join(", ", item.AllParams.Select(i => $"{i.Name}: {i.Property.TSTypeFullName}")) #>): Promise<<#= item.ReturnType #>> {
    <# if (item.ReturnType != "void") { #>const response = <# } #>await apiClient.instance.<#= item.HttpMethod #><# if (item.ReturnType != "void") { #><<#= item.ReturnType #>><# } #>(`<#= item.Route #><#= item.QueryString #>`<# if (item.BodyParam != null) { #>, <#= item.BodyParam.Name #><# } #><# if (item.ReturnType == "Blob") { #>, { responseType: 'blob' }<# } #><# if (item.BodyParam?.Property.TSTypeShortName == "File") { #>, { headers: { 'Content-Type': 'multipart/form-data' } }<# } #>);
<# if (item.ReturnType != "void") { #>
    return response.data; 
<# } #>
  },

<# } #>
};
<#+
public string TypeName { get; set; }
public string ApiClientImportPath { get; set; }
public IList<TSImport> Imports { get; set; }
public IList<TSServiceMethod> Items { get; set; }
#>